const RATE_EUR = 1.95583, REGEX = /(?:лв\.?|BGN)(?:\s*|&nbsp;|\u00A0)?(\d+(?:[.,]\d{0,2})?)|(\d+(?:[.,]\d{0,2})?)|(\d(?: ['\u00A0,&nbsp;]\d)*(?:[.,]\d{2}))(?:\s*|&nbsp;|\u00A0)?(лв\.?|BGN)/g, DIGIT_REGEX = /^\d+(?:[.,]\d+)?$/; function convertPriceText(t) { const e = [...t.matchAll(REGEX)]; if (!e || 0 === e.length) return; let o = null; if (1 === e.length ? (e[0][0] && e[0][0].match(DIGIT_REGEX) && (o = e[0][0]), e[0][1] && e[0][1].match(DIGIT_REGEX) && (o = e[0][1]), e[0][2] && e[0][2].match(DIGIT_REGEX) && (o = e[0][2])) : e[0][0] && e[0][0].match(DIGIT_REGEX) && e[1][0] && e[1][0].match(DIGIT_REGEX) ? o = e[0][0] + e[1][0] : e[0][1] && e[1][0] && e[1][0].match(DIGIT_REGEX) && (o = e[0][1].replace(",", "").replace(" ", "") + e[1][0]), !o) return; const n = parseFloat(o.replace(",", ".")); return isNaN(n) ? void 0 : (n / RATE_EUR).toFixed(2).replace(".", ",") } function appendEUR(t, e, o, n) { if (t.querySelector(".eur-price")) return; const a = document.createElement("span"); a.className = "eur-price", a.textContent = `/ ${e} €`, a.style.cssText = `\n    font-size: ${n || "1em"};\n    color: ${o || "FFFFFF"};\n    margin-left: 6px;\n    white-space: nowrap;\n  `, t.appendChild(a) } function convertWithInnerText(t) { t.forEach((t => { document.querySelectorAll(t).forEach((t => { if (NotIncludesLeva(t)) return; if (t.innerText.includes("€")) return; const e = convertPriceText(t.innerText); e && (t.innerText += `/ ${e} €`) })) })) } function convertWithAppending(t) { t.forEach((t => { document.querySelectorAll(t).forEach((t => { if (NotIncludesLeva(t)) return; if (t.querySelector(".eur-price")) return; const e = convertPriceText(t.innerText); e && appendEUR(t, e, t.style.color, t.style.fontSize) })) })) } function NotIncludesLeva(t) { return !t.innerText.includes("лв") && !t.innerText.startsWith("BGN") && !t.innerText.endsWith("BGN") } function convertCategoryPrices() { convertWithAppending(['[data-hook="product-item-price-to-pay"]', '[data-hook="formatted-primary-price"]', '[data-hook="challenge-pricing"]']) } function convertProductPagePrice() { document.querySelectorAll('div[data-testid="richTextElement"]').forEach((t => { const e = t.querySelector("p, h2, span, div"); if (!e || NotIncludesLeva(e) || e.querySelector(".eur-price")) return; const o = convertPriceText(e.innerText); o && appendEUR(e, o) })) } function convertCartTotals() { convertWithAppending(['[data-hook="SubTotals.subtotalText"]', '[data-hook="Total.formattedValue"]', '[data-hook="TotalShipping.estimatedShipping"]', 'dd[data-hook="SubTotals.subtotalText"]', 'dd[data-hook="Total.formattedValue"]', 'dd[data-hook="TotalShipping.estimatedShipping"]']) } function convertSideCartPrices() { convertWithAppending(['[data-hook="CartItemDataHook.price"]', '[data-hook="CartItemDataHook.totalPrice"] div', '[data-hook="Footer.subtotalValue"]', '[data-hook="cart-widget-item-price"]', '[data-hook="cart-widget-total"]']) } function convertCheckoutSummaryPrices() { convertWithInnerText(['[data-hook="FoldableSummarySectionDataHook.total"]', '[data-hook="LineItemDataHooks.Price"]', '[data-hook="total-row-value"] span', '[data-hook="payment-checkout-summary-plan-price"]']) } function convertThankYouPrices() { convertWithInnerText(['[data-hook="ProductLineItemDataHook.totalPrice"]', '[data-hook="subtotal-row-value"]', '[data-hook="total-row-value"]', '[data-hook="challenge-pricing"]']) } function convertFilter() { convertWithAppending(['[data-hook="filter-type-PRICE"]']) } function convertShipping() { convertWithAppending(['[data-hook="dropdown-option"]']) } function convertMembers() { convertWithInnerText(['[data-hook="subtotal"]', '[data-hook="shipping"]', '[data-hook="tax-0"]', '[data-hook="total"]', '[data-hook="product-total"]', '[data-hook="product-price"]', '[data-hook="value"]']) } function convertAllPrices() { convertCategoryPrices(), convertProductPagePrice(), convertCartTotals(), convertSideCartPrices(), convertCheckoutSummaryPrices(), convertThankYouPrices() } window.addEventListener("load", (() => { setTimeout((() => { setInterval((() => { convertAllPrices() }), 200) }), 150) }));
